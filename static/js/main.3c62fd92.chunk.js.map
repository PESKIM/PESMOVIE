{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","prototype","propTypes","string","isRequired","genres","array","Movie","_ref","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2VAgCA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAI1D,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,KAWRZ,EAAYa,UAAY,CACpBX,OAAQY,IAAUC,OAAOC,WACzBb,IAAKW,IAAUC,OAAOC,YAG1BN,EAAWG,UAAY,CACnBI,OAAQH,IAAUI,MAAMF,YAGbG,MAtDf,SAAAC,GAAiD,IAAjCZ,EAAiCY,EAAjCZ,MAAON,EAA0BkB,EAA1BlB,OAAQe,EAAkBG,EAAlBH,OAAQI,EAAUD,EAAVC,SACnC,OACIjB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACfL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAElCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACfL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACVQ,EAAOK,IAAI,SAACV,EAAOW,GAAR,OAAkBnB,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOY,IAAKD,OAEjEnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACdL,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CACLqB,KAAML,EACZM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCiCKC,6MAhDbC,MAAQ,KAORC,cAAgB,WAYd,OAXeC,EAAKF,MAAMG,OAAOb,IAAI,SAACc,EAAOb,GAC3C,OACAnB,EAAAC,EAAAC,cAAC+B,EAAD,CACA7B,MAAO4B,EAAM5B,MACbN,OAAQkC,EAAME,mBACdd,IAAKY,EAAMG,GACXtB,OAAQmB,EAAMnB,OACdI,SAAUe,EAAMf,gBAQpBmB,gCAAa,SAAAC,IAAA,IAAAN,EAAA,OAAAO,EAAArC,EAAAsC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUZ,EAAKa,WADf,OACLZ,EADKS,EAAAI,KAGXd,EAAKe,SAAS,CACZd,WAJS,wBAAAS,EAAAM,SAAAT,QAQbM,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKpB,SACvBqB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAhC1BG,KAAKpB,8CAmCE,IACCL,EAAWyB,KAAK5B,MAAhBG,OACR,OACE/B,EAAAC,EAAAC,cAAA,OAAKG,UAAW0B,EAAS,MAAQ,gBAC9BA,EAASyB,KAAK3B,gBAAkB,kBA5CvB4B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.3c62fd92.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport propTypes from 'prop-types';\n\nimport './Movie.css';\nimport LinesEllipsis from 'react-lines-ellipsis'\n\nfunction Movie({title, poster, genres, synopsis}){\n    return(\n        <div className=\"Movie\">\n            <div className=\"Movie__Columns\">\n            <MoviePoster poster={poster} alt={title} />\n            </div>\n            <div className=\"Movie__Columns\">\n            <h1>{title}</h1>\n            <div className=\"Movie__Generes\">\n                {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\n            </div>\n            <div className=\"Movie__Synopsis\">\n             <LinesEllipsis\n        text={synopsis}\n  maxLine='3'\n  ellipsis='...'\n  trimRight\n  basedOn='letters'\n/>\n            </div>\n            </div>\n        </div>\n        )\n}\n\n\nfunction MoviePoster({poster, alt}){\n    return (\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\n    )\n}\n\nfunction MovieGenre({genre}){\n    return (\n        <span className=\"Movie__Genre\">{genre} </span>\n    )\n}\n\nMovie.propTypes = {\n    title: propTypes.string.isRequired,\n    poster: propTypes.string.isRequired,\n    genres: propTypes.array.isRequired,\n    synopsis: propTypes.string.isRequired,\n}\n\nMoviePoster.prototype = {\n    poster: propTypes.string.isRequired,\n    alt: propTypes.string.isRequired\n}\n\nMovieGenre.prototype = {\n    genres: propTypes.array.isRequired,\n}\n\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from \"./Movie\";\n\n\n\nclass App extends Component {\n\n  state = {};\n  //무비를 마운트되고\n  componentDidMount(){\n    this._getMovies();\n  }\n  \n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => {\n      return ( \n      <Movie \n      title={movie.title} \n      poster={movie.medium_cover_image} \n      key={movie.id} \n      genres={movie.genres} \n      synopsis={movie.synopsis}\n      />\n      );\n    });\n    return movies\n  };\n\n  //무비를 가져오고 async = 비동기식   callApi가 끝나기를 기다린다. \n  _getMovies = async () => {\n    const movies = await this._callApi()\n    // 아래 setState는 callApi가 완료될때까지 실행되자 않음.\n    this.setState({\n      movies\n    });\n  };\n  \n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => console.log(err));\n  };\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className={movies ? \"App\" : \"App--loading\"}>\n        {movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}